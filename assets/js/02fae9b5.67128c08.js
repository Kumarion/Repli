"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var l=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,l,a=function(e,t){if(null==e)return{};var r,l,a={},n=Object.keys(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=l.createContext({}),c=function(e){var t=l.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return l.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||n;return r?l.createElement(f,i(i({ref:t},s),{},{components:r})):l.createElement(f,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<n;c++)i[c]=r[c];return l.createElement.apply(null,i)}return l.createElement.apply(null,r)}d.displayName="MDXCreateElement"},76647:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>s,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var l=r(87462),a=(r(67294),r(3905));const n={},i="Repli",o={type:"mdx",permalink:"/Repli/",source:"@site/pages/index.md",title:"Repli",description:"Repli is a Roblox library that makes it simple and straightforward to replicate values from the server to the client. Designed to streamline the process of sharing data across networked games, Repli provides an efficient and easy-to-use solution for developers looking to create high-quality, multiplayer experiences on Roblox.",frontMatter:{}},p=[{value:"Simple Example (Server)",id:"simple-example-server",level:2},{value:"Simple Example (Client)",id:"simple-example-client",level:2}],c={toc:p};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,l.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"repli"},"Repli"),(0,a.kt)("p",null,"Repli is a Roblox library that makes it simple and straightforward to replicate values from the server to the client. Designed to streamline the process of sharing data across networked games, Repli provides an efficient and easy-to-use solution for developers looking to create high-quality, multiplayer experiences on Roblox."),(0,a.kt)("p",null,"Documentation: ",(0,a.kt)("a",{parentName:"p",href:"https://kumarion.github.io/Repli/"},"https://kumarion.github.io/Repli/")),(0,a.kt)("h1",{id:"super-simple-api"},"Super Simple API"),(0,a.kt)("p",null,"Repli provides a simple and intuitive API that makes it easy to get started with replicating data. The library is designed to be as simple as possible, so you can focus on creating your game instead of worrying about the technical details."),(0,a.kt)("h2",{id:"simple-example-server"},"Simple Example (Server)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Players = game:GetService("Players");\nlocal Repli = require(game:GetService("ReplicatedStorage").Repli);\n\nlocal replicatedValue = Repli.createValue("ReplicatedValue", 0);\nlocal replicatedTable = Repli.createTable("ReplicatedTable", {1, 2, 3});\nprint(replicatedValue:getValue()); -- 0\n\n-- Set the value for all clients to 5\nreplicatedValue:setValue(5);\n\n-- Get the value for all clients\nlocal value = replicatedValue:getValue();\nprint(value); -- 5\n\n-- Individually set the value for each client\nPlayers.PlayerAdded:Connect(function(player)\n    -- Set the value for a specific client\n    replicatedTable:setValueForClient(player, {1, 2, 3, 4});\n\n    -- Get the value for a specific client\n    local value = replicatedTable:getValueForClient(player);\n    print(value); -- {1, 2, 3, 4}\nend);\n')),(0,a.kt)("h2",{id:"simple-example-client"},"Simple Example (Client)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Players = game:GetService("Players");\nlocal Repli = require(game:GetService("ReplicatedStorage").Repli);\n\n-- Get the value from the server\nlocal replicatedValue = Repli.fromValue("ReplicatedValue");\n\n-- Write a callback to be called when the value changes\nlocal function onValueChanged(newValue)\n    -- Will initially print 0, but will print 5 after the server sets the value\n    print(newValue); -- 5\nend\n\n-- Add the callback to the subscriber method\nreplicatedValue:subscribe(onValueChanged);\n')))}s.isMDXComponent=!0}}]);